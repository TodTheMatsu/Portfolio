import { motion } from 'framer-motion';
import { useRef } from 'react';
import vid1 from './assets/videos/assistant/vid1.mp4';
import vid2 from './assets/videos/assistant/vid2.mp4';
import vid3 from './assets/videos/assistant/vid3.mp4';
import vid4 from './assets/videos/assistant/vid4.mp4';
function WhattodoInfo({ onClick }) {
  const handleClick = (e) => {
    if (e.target === e.currentTarget) onClick();
  };

  const introRef = useRef(null);
  const featuresRef = useRef(null);
  const techStackRef = useRef(null);
  const scrollToSection = (ref) => {
    console.log(ref);
    ref.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const features = [
    {
      name: 'Dynamic AI Responses',
      description: "Utilizes Google's Gemini 1.5 Flash for natural, intelligent conversations with fast response times and long context tokens.",
      video: vid1,
    },
    {
      name: 'Save and Revisit Previous Conversations',
      description: "Allows users to save and revisit previous conversations, titles of conversations are auto-generated by Gemini 1.5 Flash.",
      video: vid2
    },
    {
      name: 'Code Generations',
      description: "Allows users to generate code from natural language prompts and copy code snippets with the click of a button.",
      video: vid3
    },
    {
      name: "Markdowns",
      description: "Text are properly formatted and rendered as markdown.",
      video: vid4
    }
  ];
  
  const sectionRefs = {
    Introduction: introRef,
    Features: featuresRef,
    'Technology Stack': techStackRef,
  };
  const description = "This chat application allows users to interact with Google's Generative AI model. It features a modern UI, real-time AI responses, and the ability to save and revisit previous conversations.";
  const tech = {
    Frontend: [
      "React + Vite",
      "Tailwind CSS"
    ],
    Backend: [
    ]
  };
  

  const textVariants = {
    hidden: { opacity: 0 },
    visible: { opacity: 1, transition: { duration: 1, ease: 'easeOut' } },
  };

  const containerVariants = {
    visible: { transition: { delayChildren: 0.5, staggerChildren: 0.2 } },
  };

  const renderText = (text, textSize = 'text-xl') => (
    text.split('').map((char, index) => (
      <motion.span
        key={index}
        initial={{ opacity: 0 }}
        whileInView={{ opacity: 1, transition: { delay: index * 0.005, ease: 'easeOut', duration: 1 } }}
        viewport={{ once: true }}
        className={`text-white font-sans font-thin mx-auto text-center w-full ${textSize}`}
      >
        {char}
      </motion.span>
    ))
  );

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      className="w-screen h-screen bg-black bg-opacity-50 backdrop-blur-md flex-col flex justify-center items-center fixed"

    >
      <motion.div onClick={handleClick} className="w-full h-full flex justify-center overflow-auto py-28 space-x-5 px-20 scroll-smooth">
        <motion.div
          variants={containerVariants}
          initial="hidden"
          whileInView="visible"
          viewport={{ once: true }}
          className="w-1/2 max-w-[50%] h-max py-5 flex-grow bg-black bg-opacity-20 rounded-2xl flex flex-col justify-start items-center backdrop-blur-md px-10 space-y-5"
        >
          <div className='mx-auto flex flex-row justify-start items-center'>
            <svg fill="none" xmlns="http://www.w3.org/2000/svg" className=" stroke-white h-40 w-auto mb-10" viewBox="0 0 20 20">
              <motion.path initial={{ pathLength: 0, fill: "none" }} animate={{ pathLength: 1,transition: { duration: 2, delay: 1 }}} viewport={{ once: true }}
              d="M7.39804 12.8085c.17624.1243.38672.1909.60239.1905.2159.0002.42643-.0673.602-.193.1775-.1305.31221-.3108.387-.518l.447-1.373c.11443-.3443.30748-.6572.56387-.9139.2563-.25674.569-.45021.9131-.5651l1.391-.45101c.152-.05435.2892-.14315.4011-.25944s.1953-.2569.2437-.41082c.0485-.15393.0606-.31697.0355-.47637-.0251-.15939-.0868-.3108-.1803-.44236-.1341-.18593-.325-.32317-.544-.391l-1.375-.447c-.3445-.11423-.6576-.3072-.91453-.56359-.25691-.25638-.45052-.56913-.56544-.91341l-.452-1.388c-.0723-.20231-.20582-.37707-.382-.5-.13266-.09373-.28536-.15521-.44595-.17956-.16059-.02434-.32465-.01088-.47912.03931-.15448.0502-.29511.13575-.41072.24985-.1156.11409-.20299.25359-.25521.4074l-.457 1.4c-.11459.33482-.30376.63923-.55321.89025-.24946.25101-.55269.44207-.88679.55875l-1.391.448c-.15178.05439-.28891.14317-.40066.25938-.11176.11622-.19511.25672-.24353.4105-.04842.15379-.0606.31669-.03559.47597.02502.15928.08655.31061.17978.44215.12784.17945.30862.31442.517.386l1.374.44499c.44011.14649.82656.42083 1.11.78801.16242.2106.28787.4473.371.7l.452 1.391c.07203.2033.20536.3792.38161.5035Zm6.13726 4.0425c.136.0962.2984.1479.465.148.1651.0001.3261-.0509.461-.146.1395-.0985.2445-.2384.3-.4l.248-.762c.0532-.1584.1422-.3025.26-.421.1174-.1185.2614-.2073.42-.259l.772-.252c.1577-.0545.2944-.1569.391-.293.0734-.103.1213-.2219.1398-.347.0185-.1251.0071-.2528-.0333-.3727-.0404-.1198-.1087-.2283-.1991-.3167-.0905-.0884-.2006-.154-.3214-.1916l-.764-.249c-.1581-.0525-.3019-.1412-.4199-.2588-.118-.1177-.2071-.2612-.2601-.4192l-.252-.773c-.0537-.1578-.1563-.2944-.293-.39-.102-.0729-.2198-.1209-.3437-.1399-.124-.0191-.2507-.0087-.3699.0302-.1193.0389-.2277.1053-.3165.1939-.0888.0885-.1556.1967-.1949.3158l-.247.762c-.0523.1577-.1398.3013-.256.42-.1147.1165-.2546.2051-.409.259l-.773.252c-.159.0539-.2971.1565-.3946.2933-.0975.1367-.1495.3007-.1486.4686.0009.1679.0546.3313.1535.4671.099.1357.2381.2368.3977.289l.763.247c.1589.0534.3033.1427.422.261.1182.1183.2067.2629.258.422l.253.774c.0548.1565.1568.2921.292.388Z"/>
            </svg>
            <svg fill="none" xmlns="http://www.w3.org/2000/svg" className=" stroke-white absolute h-40 w-auto mb-10 blur-md" viewBox="0 0 20 20">
              <motion.path initial={{ pathLength: 0, opacity: 0, fill: "none" }} animate={{ pathLength: 1, opacity: 1,transition: { duration: 2, delay: 1.5 }}} viewport={{ once: true }}
              d="M7.39804 12.8085c.17624.1243.38672.1909.60239.1905.2159.0002.42643-.0673.602-.193.1775-.1305.31221-.3108.387-.518l.447-1.373c.11443-.3443.30748-.6572.56387-.9139.2563-.25674.569-.45021.9131-.5651l1.391-.45101c.152-.05435.2892-.14315.4011-.25944s.1953-.2569.2437-.41082c.0485-.15393.0606-.31697.0355-.47637-.0251-.15939-.0868-.3108-.1803-.44236-.1341-.18593-.325-.32317-.544-.391l-1.375-.447c-.3445-.11423-.6576-.3072-.91453-.56359-.25691-.25638-.45052-.56913-.56544-.91341l-.452-1.388c-.0723-.20231-.20582-.37707-.382-.5-.13266-.09373-.28536-.15521-.44595-.17956-.16059-.02434-.32465-.01088-.47912.03931-.15448.0502-.29511.13575-.41072.24985-.1156.11409-.20299.25359-.25521.4074l-.457 1.4c-.11459.33482-.30376.63923-.55321.89025-.24946.25101-.55269.44207-.88679.55875l-1.391.448c-.15178.05439-.28891.14317-.40066.25938-.11176.11622-.19511.25672-.24353.4105-.04842.15379-.0606.31669-.03559.47597.02502.15928.08655.31061.17978.44215.12784.17945.30862.31442.517.386l1.374.44499c.44011.14649.82656.42083 1.11.78801.16242.2106.28787.4473.371.7l.452 1.391c.07203.2033.20536.3792.38161.5035Zm6.13726 4.0425c.136.0962.2984.1479.465.148.1651.0001.3261-.0509.461-.146.1395-.0985.2445-.2384.3-.4l.248-.762c.0532-.1584.1422-.3025.26-.421.1174-.1185.2614-.2073.42-.259l.772-.252c.1577-.0545.2944-.1569.391-.293.0734-.103.1213-.2219.1398-.347.0185-.1251.0071-.2528-.0333-.3727-.0404-.1198-.1087-.2283-.1991-.3167-.0905-.0884-.2006-.154-.3214-.1916l-.764-.249c-.1581-.0525-.3019-.1412-.4199-.2588-.118-.1177-.2071-.2612-.2601-.4192l-.252-.773c-.0537-.1578-.1563-.2944-.293-.39-.102-.0729-.2198-.1209-.3437-.1399-.124-.0191-.2507-.0087-.3699.0302-.1193.0389-.2277.1053-.3165.1939-.0888.0885-.1556.1967-.1949.3158l-.247.762c-.0523.1577-.1398.3013-.256.42-.1147.1165-.2546.2051-.409.259l-.773.252c-.159.0539-.2971.1565-.3946.2933-.0975.1367-.1495.3007-.1486.4686.0009.1679.0546.3313.1535.4671.099.1357.2381.2368.3977.289l.763.247c.1589.0534.3033.1427.422.261.1182.1183.2067.2629.258.422l.253.774c.0548.1565.1568.2921.292.388Z"/>
            </svg>
          <motion.h1 variants={textVariants} className="text-white font-sans font-thin text-center text-9xl mb-10 pb-5">
            Assistant
          </motion.h1></div>
          
          <motion.hr variants={textVariants} className="w-full mx-auto" />
          <motion.h1 variants={textVariants} ref={introRef} className="text-white font-sans font-thin mx-auto text-center rounded-3xl px-2  pb-2 text-4xl">
            Introduction
          </motion.h1>
          <motion.p variants={textVariants} className="text-white font-sans font-thin mx-auto text-center w-full">
            {renderText(description)}
          </motion.p>
          <motion.hr variants={textVariants} className="w-full mx-auto" />
          <motion.h1 variants={textVariants} ref={featuresRef} className="text-white font-sans font-thin mx-auto text-center rounded-3xl px-2 pb-2 text-4xl">
            Features
          </motion.h1>
          {features.map((feature, index) => (
            <>
              <motion.h2 variants={textVariants} className="text-white font-sans font-thin mx-auto text-center rounded-3xl px-2 pb-2 text-2xl">
                {index + 1}. {feature.name}
              </motion.h2>
              <motion.video variants={textVariants} autoPlay loop className="w-full h-auto rounded-2xl shadow-2xl">
                <source src={feature.video} type="video/mp4" />
              </motion.video>
              <motion.p variants={textVariants} className={`text-white font-sans font-thin mx-auto text-center w-full text-xl`}>
                {renderText(feature.description)}
              </motion.p>
            </>
          ))}
          <motion.hr variants={textVariants} className="w-full mx-auto flex items-center justify-center" />
          <motion.h1 variants={textVariants} ref={techStackRef} className="text-white font-sans font-thin mx-auto text-center rounded-3xl px-4 pb-2 text-4xl">
            Technology Stack
          </motion.h1>
          <motion.div className='flex items-center justify-center flex-row gap-5'>
            <motion.div variants={textVariants} className='flex max-h-[150px] flex-col gap-2 outline outline-2 rounded-3xl outline-white px-2 py-2'>
              <motion.h2 variants={textVariants} className="text-white font-sans font-thin mx-auto text-center rounded-3xl px-2 pb-2 text-3xl">
                Frontend
              </motion.h2>
              {tech.Frontend.map((tech, index) => (
                <motion.p key={index} variants={textVariants} className={`text-white font-sans font-thin mx-auto text-center w-full text-xl`}>
                  {renderText(tech)}
                </motion.p>
              ))}
            </motion.div>

          </motion.div>
          <motion.hr variants={textVariants} className="w-full mx-auto" />
          <motion.a whileHover={{ scale: 1.1, transition: { duration: 0.2} }} href="https://github.com/TodTheMatsu/Assistant"  variants={textVariants} target="_blank" className="text-white  backdrop-blur-md font-sans font-thin mx-auto text-center rounded-3xl px-2 outline pb-2 text-4xl">
          <motion.h2  className="text-white mix-blend-darken font-sans font-thin mx-auto text-center rounded-3xl px-2 text-4xl">Source code</motion.h2>
          </motion.a>
        </motion.div>
        <motion.div className="w-[200px] right-[15%] bg-white bg-opacity-20 rounded-3xl flex flex-col gap-5 py-5 justify-center items-center fixed backdrop-blur-md">
          {Object.entries(sectionRefs).map(([section, ref]) => {
            return (
              <motion.h1
                key={section}
                onClick={() => scrollToSection(ref)}
                className="text-white font-sans font-thin mx-auto text-center w-full text-2xl cursor-pointer"
              >
                {section}
              </motion.h1>
            );
          })}
        </motion.div>
      </motion.div>
    </motion.div>
  );
}

export default WhattodoInfo;
